```flux
# Flux script: latency from middts -> simulator
# Usage: paste into Influx Data Explorer (select bucket "data" and appropriate time range)

import "experimental"

// Read middts sent timestamps (events sent by middts toward devices/simulator)
middts_sent = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device_data")
  |> filter(fn: (r) => r["source"] == "middts")
  |> filter(fn: (r) => r._field == "sent_timestamp")
  |> map(fn: (r) => ({ r with sent_timestamp: r._value }))
  |> keep(columns: ["_time", "sensor", "sent_timestamp"])

// Read simulator received timestamps (when simulator/device records reception)
simulator_recv = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device_data")
  |> filter(fn: (r) => r["source"] == "simulator")
  |> filter(fn: (r) => r._field == "received_timestamp")
  |> map(fn: (r) => ({ r with received_timestamp: r._value }))
  |> keep(columns: ["_time", "sensor", "received_timestamp"])

// Join on sensor and compute latency (ms)
joined = join(tables: {m: middts_sent, s: simulator_recv}, on: ["sensor"]) 
  |> map(fn: (r) => ({
    _time: r._time_s,
    sensor: r.sensor,
    sent_timestamp: r.sent_timestamp,
    received_timestamp: r.received_timestamp,
    latency_ms: float(v: (r.received_timestamp - r.sent_timestamp))
  }))
  |> filter(fn: (r) => exists r.sent_timestamp and exists r.received_timestamp and r.latency_ms >= 0.0)

// Per-received-event: for each received_timestamp pick the smallest latency
// (this chooses the closest middts sent_timestamp that occurred before the receive)
per_event = joined
  |> group(columns: ["sensor", "received_timestamp"]) 
  |> min(column: "latency_ms")

// Output per-event latencies
per_event
  |> yield(name: "latency_per_event_middts_to_simulator")

// Aggregations: mean latency per sensor
per_event
  |> group(columns: ["sensor"]) 
  |> mean(column: "latency_ms")
  |> yield(name: "latency_mean_per_sensor_middts_to_simulator")

// Aggregations: 95th percentile per sensor
per_event
  |> group(columns: ["sensor"]) 
  |> quantile(column: "latency_ms", q: 0.95)
  |> yield(name: "latency_p95_per_sensor_middts_to_simulator")

# End of script
```
