import "experimental"

// Mean latency per sensor: middts -> simulator
// Usage: open in Data Explorer, select same bucket and time window as other reports

middts_sent = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device_data")
  |> filter(fn: (r) => r["source"] == "middts")
  |> filter(fn: (r) => r._field == "sent_timestamp")
  |> rename(columns: {_value: "sent_timestamp"})
  |> keep(columns: ["_time", "sensor", "sent_timestamp"])

simulator_recv = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device_data")
  |> filter(fn: (r) => r["source"] == "simulator")
  |> filter(fn: (r) => r._field == "received_timestamp")
  |> rename(columns: {_value: "received_timestamp"})
  |> keep(columns: ["_time", "sensor", "received_timestamp"])

joined = join(tables: {m: middts_sent, s: simulator_recv}, on: ["sensor"])
  |> map(fn: (r) => ({
    _time: r._time_s,
    sensor: r.sensor,
    sent_timestamp: r.sent_timestamp,
    received_timestamp: r.received_timestamp,
    latency_ms: float(v: (r.received_timestamp - r.sent_timestamp))
  }))
  |> filter(fn: (r) => exists r.sent_timestamp and exists r.received_timestamp and r.latency_ms >= 0.0)

// Per received event pick the smallest latency (closest sent before receive)
per_event = joined
  |> group(columns: ["sensor", "received_timestamp"]) 
  |> min(column: "latency_ms")

// Mean latency per sensor
per_event
  |> group(columns: ["sensor"])
  |> mean(column: "latency_ms")
  |> yield(name: "latency_mean_per_sensor_middts_to_simulator")
