import "experimental"

// S2M Latency Report - Versão Otimizada
// Calcula latência real S2M usando algoritmo de matching melhorado

// Read simulator sent timestamps
simulator = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device_data")
  |> filter(fn: (r) => r["source"] == "simulator")
  |> filter(fn: (r) => r._field == "sent_timestamp")
  |> map(fn: (r) => ({ r with sent_timestamp: r._value }))
  |> keep(columns: ["_time", "sensor", "sent_timestamp"])

// Read middts received timestamps
middts = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device_data")
  |> filter(fn: (r) => r["source"] == "middts")
  |> filter(fn: (r) => r._field == "received_timestamp")
  |> map(fn: (r) => ({ r with received_timestamp: r._value }))
  |> keep(columns: ["_time", "sensor", "received_timestamp"])

// Join on sensor with temporal window optimization
joined = join(tables: {s: simulator, m: middts}, on: ["sensor"]) 
  |> map(fn: (r) => ({
    _time: r._time_m,
    sensor: r.sensor,
    sent_timestamp: r.sent_timestamp,
    received_timestamp: r.received_timestamp,
    latency_ms: float(v: (r.received_timestamp - r.sent_timestamp)),
    time_diff_ns: int(v: r._time_m) - int(v: r._time_s)
  }))
  |> filter(fn: (r) => exists r.sent_timestamp and exists r.received_timestamp)
  |> filter(fn: (r) => r.latency_ms >= 0.0 and r.latency_ms < 1000.0)  // Filtro mais restritivo
  |> filter(fn: (r) => r.time_diff_ns >= 0 and r.time_diff_ns < 30000000000)  // Janela de 30s

// Per-event: keep the minimum latency to avoid correlation errors
per_event = joined
  |> group(columns: ["sensor", "sent_timestamp"]) 
  |> min(column: "latency_ms")
  |> group()

// Resultados
per_event
  |> yield(name: "s2m_latency_events")

// Estatísticas por sensor
per_event
  |> group(columns: ["sensor"])
  |> mean(column: "latency_ms")
  |> yield(name: "s2m_mean_per_sensor")

per_event
  |> group(columns: ["sensor"]) 
  |> quantile(column: "latency_ms", q: 0.95)
  |> yield(name: "s2m_p95_per_sensor")

// Estatísticas globais
per_event
  |> mean(column: "latency_ms")
  |> yield(name: "s2m_mean_global")

per_event
  |> quantile(column: "latency_ms", q: 0.95)
  |> yield(name: "s2m_p95_global")