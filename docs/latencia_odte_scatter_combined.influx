// Scatter Plot Combinado: ODTE Real S2M + M2S em um único gráfico
// Visualização completa da latência bidirecional com timestamps exatos
// Permite comparação direta entre as direções S2M e M2S

import "experimental"

// S2M Data Stream (Simulator → Middleware)
// Uses device_data measurement with source-based timestamps
s2m_sent = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device_data")
  |> filter(fn: (r) => r["source"] == "simulator")
  |> filter(fn: (r) => r._field == "sent_timestamp")
  |> map(fn: (r) => ({ r with sent_timestamp: r._value }))
  |> keep(columns: ["_time", "sensor", "sent_timestamp"])

s2m_received = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device_data")
  |> filter(fn: (r) => r["source"] == "middts")
  |> filter(fn: (r) => r._field == "received_timestamp")
  |> map(fn: (r) => ({ r with received_timestamp: r._value }))
  |> keep(columns: ["_time", "sensor", "received_timestamp"])

s2m_latency = join(tables: {s: s2m_sent, r: s2m_received}, on: ["sensor"])
  |> filter(fn: (r) => exists r.sent_timestamp and exists r.received_timestamp)
  |> map(fn: (r) => ({
    _time: r._time_r,
    sensor: r.sensor,
    direction: "S2M",
    latencia_ms: float(v: (r.received_timestamp - r.sent_timestamp)),
    time_diff_ns: int(v: r._time_r) - int(v: r._time_s)
  }))
  |> filter(fn: (r) => r.latencia_ms >= 0.0 and r.latencia_ms < 1000.0)
  |> filter(fn: (r) => r.time_diff_ns >= 0 and r.time_diff_ns < 30000000000)
  |> keep(columns: ["_time", "sensor", "latencia_ms", "direction"])

// M2S Data Stream (Middleware → Simulator)  
// Uses latency_measurement with source-based timestamps
m2s_sent = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "latency_measurement")
  |> filter(fn: (r) => r["source"] == "middts")
  |> filter(fn: (r) => r._field == "sent_timestamp")
  |> map(fn: (r) => ({ r with sent_timestamp: r._value }))
  |> keep(columns: ["_time", "sensor", "sent_timestamp"])

m2s_received = from(bucket: "iot_data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "latency_measurement")
  |> filter(fn: (r) => r["source"] == "simulator")
  |> filter(fn: (r) => r._field == "received_timestamp")
  |> map(fn: (r) => ({ r with received_timestamp: r._value }))
  |> keep(columns: ["_time", "sensor", "received_timestamp"])

m2s_latency = join(tables: {s: m2s_sent, r: m2s_received}, on: ["sensor"])
  |> filter(fn: (r) => exists r.sent_timestamp and exists r.received_timestamp)
  |> map(fn: (r) => ({
    _time: r._time_r,
    sensor: r.sensor,
    direction: "M2S",
    latencia_ms: float(v: (r.received_timestamp - r.sent_timestamp)),
    time_diff_ns: int(v: r._time_r) - int(v: r._time_s)
  }))
  |> filter(fn: (r) => r.latencia_ms >= 0.0 and r.latencia_ms < 1000.0)
  |> filter(fn: (r) => r.time_diff_ns >= 0 and r.time_diff_ns < 30000000000)
  |> keep(columns: ["_time", "sensor", "latencia_ms", "direction"])

// Union and Sort Combined Data for Scatter Plot
union(tables: [s2m_latency, m2s_latency])
  |> sort(columns: ["_time"])
  |> yield(name: "latencia_odte_scatter_combined")

// Summary Statistics
s2m_stats = s2m_latency
  |> mean(column: "latencia_ms")
  |> map(fn: (r) => ({ r with direction: "S2M", stat_type: "mean" }))

m2s_stats = m2s_latency
  |> mean(column: "latencia_ms")
  |> map(fn: (r) => ({ r with direction: "M2S", stat_type: "mean" }))

union(tables: [s2m_stats, m2s_stats])
  |> yield(name: "latencia_comparison_stats")