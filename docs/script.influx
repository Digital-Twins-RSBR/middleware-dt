# Script para pegar a latencia do simulator para o middleware

import "experimental"
simulatorData = from(bucket: "data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device_data")
  |> filter(fn: (r) => r["source"] == "simulator")
  |> filter(fn: (r) => r["_field"] == "sent_timestamp")
  |> rename(columns: {_value: "sent_timestamp"})
  |> keep(columns: ["_time", "sensor", "sent_timestamp"])
  |> group(columns: ["sensor"])
  |> sort(columns: ["_time"], desc: false)  // Ordena pelo tempo
midttsData = from(bucket: "data")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device_data")
  |> filter(fn: (r) => r["source"] == "middts")
  |> filter(fn: (r) => r["_field"] == "received_timestamp")
  |> rename(columns: {_value: "received_timestamp"})
  |> keep(columns: ["_time", "sensor", "received_timestamp"])
  |> group(columns: ["sensor"])
  |> sort(columns: ["_time"], desc: false)  // Ordena pelo tempo
joinedData = join(
  tables: {simulator: simulatorData, midtts: midttsData},
  
